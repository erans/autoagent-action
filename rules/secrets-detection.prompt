Perform a comprehensive secrets detection analysis to identify hardcoded sensitive information that should never be committed to a repository. Scan for various types of secrets, credentials, and sensitive data across all file types.

## Key Areas to Analyze:

### 1. **API Keys and Tokens**
- AWS Access Keys (AKIA*, ASIA*, AROA*)
- Google API Keys (AIza*)
- GitHub Personal Access Tokens (ghp_*, gho_*, ghu_*, ghs_*, ghr_*)
- OpenAI API Keys (sk-*)
- Stripe Keys (sk_live_*, pk_live_*, rk_live_*)
- Firebase Keys and Service Account Keys
- JWT tokens and Bearer tokens
- Generic API key patterns (32+ character strings)

### 2. **Database Credentials**
- Connection strings with embedded passwords
- Database URLs with credentials
- MongoDB connection strings
- PostgreSQL/MySQL credentials
- Redis AUTH tokens
- Database environment variables with hardcoded values

### 3. **Authentication Secrets**
- Private keys (-----BEGIN PRIVATE KEY-----)
- SSH private keys (-----BEGIN OPENSSH PRIVATE KEY-----)
- RSA/DSA/ECDSA key materials
- Certificate files with private keys
- OAuth secrets and client secrets
- SAML certificates and keys

### 4. **Cloud Provider Secrets**
- AWS Secret Access Keys
- Azure connection strings and account keys
- Google Cloud service account JSON files
- DigitalOcean API tokens
- Heroku API keys
- Docker Hub credentials

### 5. **Third-Party Service Keys**
- Slack webhooks and bot tokens
- Discord bot tokens
- Twilio Auth tokens
- SendGrid API keys
- Mailgun API keys
- Payment processor keys (PayPal, Square)

### 6. **Cryptographic Material**
- Weak cryptographic algorithms (MD5, SHA1, DES, RC4)
- Hardcoded encryption keys and initialization vectors
- Private keys in code or configuration files
- Weak random number generation (predictable seeds)
- Custom cryptographic implementations (red flag)
- Hardcoded salts for password hashing

### 7. **Logging Security Issues**
- Passwords or tokens appearing in log statements
- Sensitive data in exception messages
- API keys in debug logs
- User credentials in application logs
- Database connection strings in logs
- Session tokens in log files

### 8. **Generic Sensitive Patterns**
- Passwords in configuration files
- Hardcoded secrets in environment variables
- Base64 encoded credentials that decode to secrets
- Hexadecimal secrets (32+ chars)
- Email addresses with passwords
- FTP/SFTP credentials
- Webhook URLs with embedded tokens

## File Types to Examine:

### **Configuration Files**
- `.env`, `.env.local`, `.env.production`
- `config.json`, `config.yaml`, `settings.ini`
- `docker-compose.yml`, `Dockerfile`
- CI/CD configuration files

### **Source Code Files**
- All programming languages (JS, Python, Java, Go, C#, PHP, etc.)
- SQL files and database scripts
- Shell scripts and batch files
- Infrastructure as Code (Terraform, CloudFormation)

### **Documentation and Other Files**
- README files, documentation
- Comment blocks in source code
- Log files accidentally committed
- Backup files and temporary files

## Detection Patterns:

### **High-Risk Patterns:**
```regex
# API Keys
['\"][A-Za-z0-9+/]{32,}['\"]
AKIA[0-9A-Z]{16}
AIza[0-9A-Za-z_-]{35}
ghp_[a-zA-Z0-9]{36}
sk-[a-zA-Z0-9]{32,}

# Database URLs
(mysql|postgresql|mongodb)://[^:]+:[^@]+@
redis://[^:]*:[^@]+@

# Private Keys
-----BEGIN\s+.*PRIVATE KEY-----

# Weak Crypto Algorithms
\.md5\(|MD5\(|hashlib\.md5
\.sha1\(|SHA1\(|hashlib\.sha1
DES|RC4|3DES

# Logging Sensitive Data
log.*password|logger.*token|console\.log.*secret
print.*password|echo.*token|printf.*secret
```

### **Context Analysis:**
- Variable names suggesting secrets (password, secret, key, token, auth, credential)
- Comments indicating sensitive data ("TODO: remove hardcoded key")
- Hardcoded values in authentication functions
- Configuration sections with sensitive data
- Log statements containing sensitive variable names
- Exception handling that might leak credentials

### **Cryptographic Security Patterns:**
- Hardcoded encryption keys: `AES.encrypt(data, "hardcoded_key")`
- Weak random generation: `Random(123)`, `srand(1)`, predictable seeds
- Custom crypto: implementations of encryption algorithms
- Hardcoded IVs: `new IvParameterSpec(hardcoded_bytes)`
- Weak hashing: `md5(password)`, `sha1(password + "salt")`

### **Logging Security Patterns:**
- Credential logging: `log.info("User password: " + password)`
- Token exposure: `console.log("Auth token: " + token)`
- Debug information: `System.out.println("Secret: " + secret)`
- Exception details: `catch(Exception e) { log.error("Failed login for " + username + ":" + password, e) }`

## Analysis Requirements:

- **Entropy Analysis**: Flag high-entropy strings that may be secrets
- **Context Evaluation**: Consider variable names and surrounding code
- **Format Recognition**: Identify known secret formats and patterns
- **False Positive Reduction**: Distinguish between examples/tests and real secrets
- **Historical Analysis**: Check if secrets were recently added or modified

**IMPORTANT: Only provide the final analysis results. Do not show your thinking process, intermediate steps, or work-in-progress.**

For each secret detection finding, provide:
- **File and line number** where the secret was found
- **Secret type** (API key, password, private key, etc.)
- **Pattern matched** (without revealing the actual secret value)
- **Risk level** (Critical/High/Medium/Low)
- **Context** (variable name, function, configuration section)
- **Remediation steps** (environment variables, secret management, etc.)
- **Example fix** (how to properly handle the secret)

If no secrets are detected, confirm that the code appears to follow secure practices for credential management.

## Detection Strategies:

### **Multi-Language Pattern Detection**
- **JavaScript/TypeScript**: `const apiKey = "sk-..."; process.env.SECRET = "hardcoded"`
- **Python**: `API_KEY = "AKIA..."; os.environ["SECRET"] = "value"`
- **Java**: `String password = "secret123"; System.setProperty("key", "hardcoded")`
- **Go**: `const token = "ghp_..."; os.Setenv("SECRET", "hardcoded")`
- **C#**: `string connectionString = "Server=...;Password=secret"`
- **PHP**: `$password = "secret123"; $_ENV['API_KEY'] = "hardcoded"`

### **Configuration File Patterns**
- **Environment Files**: `.env`, `.env.local`, `.env.production`
  ```
  DATABASE_PASSWORD=plaintext_password
  API_KEY=AKIA1234567890123456
  JWT_SECRET=my_secret_key_123
  ```
- **YAML/JSON Config**: Hardcoded credentials in configuration
- **Docker**: Secrets in Dockerfiles or docker-compose.yml
- **CI/CD**: Credentials in GitHub Actions, GitLab CI, or other pipeline files

### **Advanced Detection Techniques**
- **Base64 Decoding**: Check if base64 strings decode to credential patterns
- **Hex Pattern Analysis**: Long hexadecimal strings (32+ characters) as potential secrets
- **Entropy Calculation**: High-entropy strings that may be encoded credentials
- **URL Parameter Extraction**: Extract credentials from connection strings and URLs
- **Certificate Analysis**: Check for embedded private keys in certificate files

### **Context-Aware Analysis**
- **Variable Naming**: Variables named `secret`, `key`, `token`, `password`, `auth`, `credential`
- **Function Context**: Secrets in authentication, encryption, or API functions
- **Comment Analysis**: TODO comments mentioning hardcoded credentials
- **Test vs Production**: Distinguish between test fixtures and real secrets
- **Recent Changes**: Prioritize recently added potential secrets

### **False Positive Reduction**
- **Example/Template Detection**: Skip obvious examples like "your-api-key-here"
- **Test Data Recognition**: Identify test fixtures and mock data
- **Documentation Exclusion**: Skip secrets in documentation examples
- **Placeholder Detection**: Recognize placeholder patterns like `{{API_KEY}}`
- **Length Validation**: Ensure secret length matches expected format

**Output Format**: Provide a structured, actionable report prioritizing the most critical secret exposures first, with clear remediation guidance for each finding.